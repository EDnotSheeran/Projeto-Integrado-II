version: '3.7'

networks:
  laravel:

services:
  app:
    build:
      context: .
      dockerfile: '.docker/nginx.dockerfile'
      args:
        - NGINXUSER=${NGINXUSER}
        - NGINXGROUP=${NGINXGROUP}
    container_name: nginx
    ports:
      - 80:80
    volumes:
      - ./src:/var/www/html:delegated
    depends_on:
      - php
      - postgres
    networks:
      - laravel

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - laravel

  php:
    build:
      context: .
      dockerfile: '.docker/php.dockerfile'
      args:
        - PHPUSER=${PHPUSER}
        - PHPGROUP=${PHPGROUP}
    container_name: php
    volumes:
      - ./src:/var/www/html:delegated
    networks:
      - laravel

  composer:
    build:
      context: .
      dockerfile: '.docker/composer.dockerfile'
      args:
        - PHPUSER=${PHPUSER}
        - PHPGROUP=${PHPGROUP}
    container_name: composer
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    depends_on:
      - php
    user: ${PHPUSER}
    entrypoint: ['composer', '--ignore-platform-reqs']
    networks:
      - laravel

  npm:
    image: node:latest
    container_name: npm
    volumes:
      - ./src:/var/www/html
    ports:
      - 3000:3000
      - 3001:3001
    working_dir: /var/www/html
    entrypoint: ['npm']
    networks:
      - laravel

  artisan:
    build:
      context: .
      dockerfile: '.docker/php.dockerfile'
      args:
        - PHPUSER=${PHPUSER}
        - PHPGROUP=${PHPGROUP}
    container_name: artisan
    volumes:
      - ./src:/var/www/html:delegated
    depends_on:
      - postgres
    working_dir: /var/www/html
    entrypoint: ['php', '/var/www/html/artisan']
    networks:
      - laravel
